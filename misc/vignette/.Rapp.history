exvec <- c('a',1,2,'a',2,3,'a',4,3,'a',4,5,'a',4,7,'a',5,6,'a',7,6,'a',8,6,'a',8,7)#
plotGraph(AG(exvec,M,C,showmat=FALSE), cex = 1.2)
exvec <- c('a',1,2,'a',2,3,'a',4,3,'a',4,5,'a',4,7,'a',5,6,'a',7,6,'a',8,6,'a',8,7)#
plotGraph(AG(exvec,M,C,showmat=FALSE), cex = 1.3)
exvec <- c('a',1,2,'a',2,3,'a',4,3,'a',4,5,'a',4,7,'a',5,6,'a',7,6,'a',8,6,'a',8,7)#
plotGraph(AG(exvec,M,C,showmat=FALSE), cex = 1.4)
exvec <- c('a',1,2,'a',2,3,'a',4,3,'a',4,5,'a',4,7,'a',5,6,'a',7,6,'a',8,6,'a',8,7)#
plotGraph(AG(exvec,M,C,showmat=FALSE), cex = 1.5)
plotGraph(RG(ex,M,C,plot=F))
exdag<-dag(~r,~q*r,~p,~h*p*r,~l,~k*l,~j*k,#
            ~i*h*l*j)#
exdag
plotGraph(exdag)
fix(plotGraph)
plotGraph(exdag)
exvec<-rep(0,64)#
exmat<-matrix(exvec,8,8)#
exmat[8,7]<-1;exmat[8,5]<-1;exmat[6,5]<-1;exmat[5,1]<-1;exmat[4,1]<-1;exmat[4,3]<-1;exmat[2,1]<-1;exmat[3,2]<-1#
exmat
plotGraph(exmat)
exmcvec<-c('b','X','Y','a','X','Y','l','X','Q',#
           'b','Q','X','a','Y','Q','b','Y','Z',#
           'a','Z','W','a','W','Z','b','W','Q')#
exmcvec
plotGraph(exmcvec)
fix(plotGraph)
plotGraph(exmcvec)
fix(plotGraph)
plotGraph(exmcvec)
fix(plotGraph)
plotGraph(exmcvec)
example(plotGraph)
plotGraph(exmcvec)
example(plotGraph)
plotGraph(G)
fix(plotGraph)
plotGraph(G)
fix(plotGraph)
plotGraph(G)
fix(plotGraph)
plotGraph(G)
fix(plotGraph)
plotGraph(G)
fix(plotGraph)
plotGraph(G)
fix(plotGraph)
plotGraph(G)
plotGraph(exmcvec)
plotGraph(ex)
M <- c(5,8)#
C <- 3
plotGraph(RG(ex, M, C))
plotGraph(exmcvec)
exvec <- c('a',1,2,'a',2,3,'a',4,3,'a',4,5,'a',4,7,'a',5,6,'a',7,6,'a',8,6,'a',8,7)#
AG(exvec,M,C,showmat=FALSE, plot=TRUE)
exvec <- c('a',1,2,'a',2,3,'a',4,3,'a',4,5,'a',4,7,'a',5,6,'a',7,6,'a',8,6,'a',8,7)#
plotGraph(AG(exvec,M,C,showmat=FALSE))
SG(ex, M, C)
plotGraph
C
ex <- matrix(c(0,1,0,0,0,0,0,0,#
               0,0,1,0,0,0,0,0,#
               0,0,0,0,0,0,0,0,#
               0,0,1,0,1,0,1,0,#
               0,0,0,0,0,1,0,0,#
               0,0,0,0,0,0,0,0,#
               0,0,0,0,0,1,0,0,#
               0,0,0,0,0,1,1,0),8,8,byrow=TRUE)
plotGraph(ex)
library(ggm2)
plotGraph(ex)
RG(ex,M,C)
M
M <- c(5,8)#
C <- 3
RG(ex,M,C)
plotGraph(RG(ex,M,C))
H <- matrix(c(0  ,100,  1,  0,#
              100,0  ,100,  0,#
              0  ,100,  0,100,#
              0,  1  ,100,  0),4,4)
plotGraph(H)
plotGraph(Max(H))
a <- matrix(c(0,0,1,0,#
              0,0,1,0,#
              0,0,0,1,#
              0,0,0,0),4,4,byrow=TRUE)#
rownames(a) <- c("X","Y","Z","W")#
colnames(a) <- c("X","Y","Z","W")
plotGraph(G)
plotGraph(a)
H <- matrix(c(0,10,0,0,10,0,0,0,0,1,0,100,0,0,100,0),4,4)
plotGRaph(H)
plotGraph(H)
plotGraph(RepMarDAG(H))
plotGraph(exdag)
exdag<-dag(~r, ~q*r, ~p, ~h*p*r, ~l, ~k*l, ~j*k, ~i*h*l*j)
plotGraph(exdag)
exvec<-rep(0,64)#
exmat<-matrix(exvec,8,8)#
exmat[8,7]<-1;exmat[8,5]<-1;exmat[6,5]<-1;exmat[5,1]<-1;exmat[4,1]<-1;exmat[4,3]<-1;exmat[2,1]<-1;exmat[3,2]<-1#
exmat
plotGraph(exmat)
library(ggm2)
exdag<-dag(~r, ~q*r, ~p, ~h*p*r, ~l, ~k*l, ~j*k, ~i*h*l*j)#
exdag
class(exdag)
exdag <- graph.formula(q+-r-+h+-p, #
         h-+i+-l-+k,   i+-j+-k)#
exdag
class(exdag)
?gRbase
ug11i <- ug(~a*b*c + c*d + d*e + a*e + f*g, result="igraph")
ug11i
G =  ug(~ Hair*Eye*Sex, result="igraph")
plotGraph(G)
G =  ug(~ Hair*Eye*Sex, result="matrix")
G
plotGraph(G)
?graph.formula
?graph
?tkplot
? igraph.from.graphNEL
DAG(i ~ j+l+h, k~l, h~r+p, q ~ r)
exdag <- graph.formula(q+-r-+h+-p, #
         h-+i+-l-+k,   i+-j+-k)#
exdag#
@
exdag <- graph.formula(q+-r-+h+-p, #
         h-+i+-l-+k,   i+-j+-k)#
exdag
V(exdag)
?igraph
graph.adjacency(exdag)
get.vertex.attribute(exdag)
get.vertex.attribute(exdag, "labels")
get.vertex.attribute(exdag, "names")
?igraph
get.adjacency(exdag)
z = get.adjacency(exdag)
names(z)
dimnames(z)
dimnames(z)[[1]]
order(dimnames(z)[[1]])
 i =order(dimnames(z)[[1]])
z[i,i]
z[i[8:1],i[8:1]]
z
i = c('i', 'j', 'k' 'l', 'h' 'p','q','r')
i = c('i', 'j', 'k', 'l', 'h', 'p','q','r')
z[i,i]
A <- matrix(0,8,8)#
A[8,7] <- A[8,5] <- A[6,5] <- A[5,1] <- #
A[4,1] <- A[4,3] <- A[2,1] <- A[3,2] <- 1
V <- ('i', 'j', 'k', 'l', 'h', 'p','q','r')#
dimnames(A) <- list(V, V)
MG( ug = UG(~ X*Y) , dag = DAG(Z ~Y), bg = UG(~Z*U))
makeMG( ug = UG(~ X*Y) , dag = DAG(Z ~Y), bg = UG(~Z*U))
plotGraph(makeMG( ug = UG(~ X*Y) , dag = DAG(Z ~Y), bg = UG(~Z*U)))
DG
DAG
DG = DAG
fix(DG)
plotGraph(makeMG( ug = UG(~ X*Y) , dag = DG(Z ~Y, Y~Z), bg = UG(~Z*U)))
plotGraph(makeMG( ug = UG(~ X*Y) , dag = DG(Z ~Y, Y~Z, M~M), bg = UG(~Z*U)))
plotGraph(makeMG( ug = UG(~ X*Y) , dag = DG(Z ~Y, Y~Z, U~M), bg = UG(~Z*U)))
makeMG( ug = UG(~ X*Y) , dag = DAG(Z ~Y), bg = UG(~Z*U))
mg
mg = makeMG(dag = DG(Y ~ X, Q ~ X, Z~W, W~Z), ug = UG(~X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
mg
mg = makeMG(dag = DG(Y ~ X, Z~W, W~Z, Q~X), ug = UG(~X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
mg
makeMG
fix(makeMG)
mg = makeMG(dag = DG(Y ~ X, Z~W, W~Z, Q~X), ug = UG(~X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
mg = makeMG(dg = DG(Y ~ X, Z~W, W~Z, Q~X), ug = UG(~X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
fix(makeMG)
mg = makeMG(dg = DG(Y ~ X, Z~W, W~Z, Q~X), ug = UG(~X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
mg
mg = makeMG(dg = DG(Y ~ X, Q ~ X, Z~W, W~Z), ug = UG(~X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
mg
plotGraph(mg)
mg = makeMG(dg = DG(Y ~ X, Q~ Y, Z~W, W~Z), ug = UG(~X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
plotGraph(mg)
mg
mg = makeMG(dg = DG(Y ~ X, Q ~ Y, Z~W, W~Z), ug = UG(~ X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
mg
unmake(mg)
unmakeMG(mg)
DG(Y ~ X, Q ~ Y, Z~W, W~Z)
fix(makeMG)
mg = makeMG(dg = DG(Y ~ X, Q ~ Y, Z~W, W~Z), ug = UG(~ X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
mg
unmakeMG(mg)
fix(makeMG)
DG(Y ~ X, Q ~ Y, Z~W, W~Z)
plotGraph(DG(Y ~ X, Q ~ Y, Z~W, W~Z))
plotGraph(UG(~ Y*X+X*Q+Q*W + Y*Z))
plotGraph(UG(~ Y*X+X*Q+Q*W + Y*Z)*100)
fix(makeMG)
mg = makeMG(dg = DG(Y ~ X, Q ~ Y, Z~W, W~Z), ug = UG(~ X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
mg
plotGraph(mg)
mg
mg = makeMG(dg = DG(Y ~ X, Z~W, W~Z, Q~X), ug = UG(~X*Q), bg = UG(~ Y*X+X*Q+Q*W + Y*Z) )
mg
makeMG
DG
str(plotGraph)
fitAncestralGraph
example(fitAncestralGraph)
fitAncestralGraph(ag1 <- makeMG(dg=DAG(x~y,z~u), bg = UG(~x*z)), S, n=100)
library(ggm2)
example(fitAncestralGraph)
S
ag1
plotGraph(ag1)
S
fitAncestralGraph(ag1 <- makeMG(dg=DAG(x~y,z~u), bg = UG(~x*z)), S, n=100)
traceback()
fix(icfmag)
unmakeMG(ag1)
fix(icfmag)
library(ggm2)
example(fitAncestralGraph)
library(ggm2)
ex <- matrix(c(0,1,0,0,0,0,0,0, 0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,1,0,1,0,1,0, 0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0),8,8,byrow=TRUE)
ex
plotGraph(ex)
 M <- c(5,8)
C<-3
RG(ex, M = M, C = C)
RG(ex, M = M, C = C, plot+T)
RG(ex, M = M, C = C, plot=T)
library(ggm2)
RG
ex <- matrix(c(0,1,0,0,0,0,0,0,#
               0,0,1,0,0,0,0,0,#
               0,0,0,0,0,0,0,0,#
               0,0,1,0,1,0,1,0,#
               0,0,0,0,0,1,0,0,#
               0,0,0,0,0,0,0,0,#
               0,0,0,0,0,1,0,0,#
               0,0,0,0,0,1,1,0),8,8,byrow=TRUE)
M <- c(5,8)#
C <- 3
RG(ex,M,C,plot=TRUE)
library(ggm2)
RG(ex,M,C,plot=TRUE)
AG(ex,M,C,plot=TRUE)
SG(ex,M,C,plot=TRUE)
AG(ex,M,C,plot=TRUE)
plotGraph(SG(ex,M,C), dashed = TRUE)
MAG
H <- matrix(c(0  ,100,  1,  0,#
              100,0  ,100,  0,#
              0  ,100,  0,100,#
              0,  1  ,100,  0),4,4)
Max(H)
Max(H, plot = TRUE)
plotGraph(Max(H))
plotGraph(H)
H
isAG(H)
MAG(H)
MAG
 a <- DAG(W ~ Z, Z ~ Y + X)
plotGraph(a)
H1 <- matrix(c(0,100,0,0,0,100,0,100,0,0,0,100,0,0,0,1,0,0,0,100,0,0,1,100,0),5,5)#
H2 <- matrix(c(0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,100,0,0,1,100,0),5,5)#
H3 <- matrix(c(0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0),5,5)
plotGraph(H1)
plotGraph(H2)
plotGraph(H3)
a
plotGraph(a)
H1<-matrix(c(0,100,0,0,100,0,100,0,0,100,0,100,0,1,100,0),4,4)#
H2<-matrix(c(0,0,0,0,1,0,100,0,0,100,0,100,0,1,100,0),4,4)#
H3<-matrix(c(0,0,0,0,1,0,0,0,0,1,0,100,0,1,100,0),4,4)
plotGraph(H1)
plotGraph(H2)
plotGraph(H3)
H <- matrix(c(0,10,0,0,10,0,0,0,0,1,0,100,0,0,100,0),4,4)
plotGraph(H)
library(ggm2)
example(fitDagLatent)
plotGraph(dag)
SG(dag, M = "z", plot = TRUE)
plotGraph(SG(dag, M = "z"), dashed = T)
isAg(SG(dag, M = "z"))
isAG(SG(dag, M = "z"))
fitAncestralGraph(SG(dag, M ="z"), V, n = 530)
? fitDagLatent
source("http://www.ds.unifi.it/gmm/downloads/files/auto.R")
auto
library(ggm2)
example(plotGraph)
example(fitDagLatent)
plotGraph(dag)
library(ggm2)
G = DAG(EA ~ AP+Z, SO ~ Z, Z ~ AP+MA+SES, SES ~MA, AP ~ MA)#
out = fitDagLatent(G, R, 3500, latent = "Z", seed = 23, norm = 2)
### Example similar to that of Sewel et al. (1970)#
#
rm(list = ls())#
#
r = scan()#
1     .288  .589  .438   .418#
.288  1     .194  .359   .380#
.589  .194  1     .473   .459 #
.438  .359 .473    1     .611#
.418  .380 .459   .611   1   #
#
#
R = matrix(r, 5, 5)#
#
require(sem)#
#
#
nam = c("MA", "SES", "AP", "SO", "EA")#
dimnames(R) = list(nam, nam)#
#
mod = specify.model()#
EA <- AP, EA.AP, NA#
EA <- Z, EA.Z, NA#
SO <- Z, SO.Z, NA#
Z <- AP, Z.AP, NA#
Z <- SES, Z.SES, NA#
Z <- MA, Z.MA,  1#
AP <- MA, AP.MA, NA#
SES <- MA, SES.MA, NA#
EA <-> EA, EA.EA, NA#
AP <-> AP, AP.AP, NA#
Z<-> Z, NA, 1#
MA <-> MA, MA.MA, 1#
SES <-> SES, SES.SES, NA#
SO <-> SO, SO.SO, NA#
#
#
#
#
summary(sem(mod, R, 3500))#
#
#
## Using fitDagLatent#
library(ggm2)#
#source("~/Documents/R/ggm/ggm2/R/sefit_senin.R")  #
#
G = DAG(EA ~ AP+Z, SO ~ Z, Z ~ AP+MA+SES, SES ~MA, AP ~ MA)#
out = fitDagLatent(G, R, 3500, latent = "Z", seed = 23, norm = 2)#
sefit(G, "Z", out, R, 3500)
library(ggm2)
example(plotGraph)
G = DAG(EA ~ AP+Z, SO ~ Z, Z ~ AP+MA+SES, SES ~MA, AP ~ MA)#
out = fitDagLatent(G, R, 3500, latent = "Z", seed = 23, norm = 2)
#
r = scan()#
1     .288  .589  .438   .418#
.288  1     .194  .359   .380#
.589  .194  1     .473   .459 #
.438  .359 .473    1     .611#
.418  .380 .459   .611   1   #
#
#
R = matrix(r, 5, 5)#
#
require(sem)#
#
#
nam = c("MA", "SES", "AP", "SO", "EA")#
dimnames(R) = list(nam, nam)#
#
mod = specifyModel()#
EA <- AP, EA.AP, NA#
EA <- Z, EA.Z, NA#
SO <- Z, SO.Z, NA#
Z <- AP, Z.AP, NA#
Z <- SES, Z.SES, NA#
Z <- MA, Z.MA,  1#
AP <- MA, AP.MA, NA#
SES <- MA, SES.MA, NA#
EA <-> EA, EA.EA, NA#
AP <-> AP, AP.AP, NA#
Z<-> Z, NA, 1#
MA <-> MA, MA.MA, 1#
SES <-> SES, SES.SES, NA#
SO <-> SO, SO.SO, NA#
#
#
#
#
summary(sem(mod, R, 3500))#
#
#
## Using fitDagLatent#
library(ggm2)#
#source("~/Documents/R/ggm/ggm2/R/sefit_senin.R")  #
#
G = DAG(EA ~ AP+Z, SO ~ Z, Z ~ AP+MA+SES, SES ~MA, AP ~ MA)#
out = fitDagLatent(G, R, 3500, latent = "Z", seed = 23, norm = 2)
plotGraph(G)
plotGraph(SG(G, M = "Z"), dashed = T)
setwd('/Users/gmm/Documents/ggm/misc/vignette')
#
r = scan()#
1     .288  .589  .438   .418#
.288  1     .194  .359   .380#
.589  .194  1     .473   .459 #
.438  .359 .473    1     .611#
.418  .380 .459   .611   1   #
#
#
R = matrix(r, 5, 5)#
#
require(sem)#
#
#
nam = c("MA", "SES", "AP", "SO", "EA")#
dimnames(R) = list(nam, nam)#
#
mod = specifyModel()#
EA <- AP, EA.AP, NA#
EA <- Z, EA.Z, NA#
SO <- Z, SO.Z, NA#
Z <- AP, Z.AP, NA#
Z <- SES, Z.SES, NA#
Z <- MA, Z.MA,  1#
AP <- MA, AP.MA, NA#
SES <- MA, SES.MA, NA#
EA <-> EA, EA.EA, NA#
AP <-> AP, AP.AP, NA#
Z<-> Z, NA, 1#
MA <-> MA, MA.MA, 1#
SES <-> SES, SES.SES, NA#
SO <-> SO, SO.SO, NA#
#
#
#
#
summary(sem(mod, R, 3500))#
#
#
## Using fitDagLatent#
library(ggm2)#
#source("~/Documents/R/ggm/ggm2/R/sefit_senin.R")  #
#
G = DAG(EA ~ AP+Z, SO ~ Z, Z ~ AP+MA+SES, SES ~MA, AP ~ MA)#
out = fitDagLatent(G, R, 3500, latent = "Z", seed = 23, norm = 2)
